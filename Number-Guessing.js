import { config } from 'dotenv';
import { Client, GatewayIntentBits, REST, Routes, Collection, SlashCommandBuilder, EmbedBuilder } from 'discord.js';

config(); // ‡πÇ‡∏´‡∏•‡∏î .env

const client = new Client({ intents: [GatewayIntentBits.Guilds] });

const TOKEN = process.env.TOKEN;
const CLIENT_ID = process.env.CLIENT_ID;
const GUILD_ID = process.env.GUILD_ID;

// ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SlashCommand
const gameCommand = new SlashCommandBuilder()
    .setName('game')
    .setDescription('‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡∏ó‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç')
    .addSubcommand(subcommand =>
        subcommand.setName('start').setDescription('‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡∏ó‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç'))
    .addSubcommand(subcommand =>
        subcommand.setName('guess').setDescription('‡∏ó‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç')
            .addIntegerOption(option =>
                option.setName('number')
                    .setDescription('‡∏ó‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç')
                    .setRequired(true)
            ));

// ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏ß‡πâ
const commands = [gameCommand.toJSON()];
const rest = new REST({ version: '10' }).setToken(TOKEN);

// ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô Slash Commands ‡∏ï‡∏≠‡∏ô‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
client.once('ready', async () => {
    console.log(`‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠ ${client.user.tag}`);

    try {
        await rest.put(
            Routes.applicationGuildCommands(CLIENT_ID, GUILD_ID),
            { body: commands },
        );
        console.log('üì• ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô Slash Commands ‡πÅ‡∏•‡πâ‡∏ß');
    } catch (error) {
        console.error('‚ùå ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
    }
});

let games = new Map();
let leaderboard = new Map();

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
client.on('interactionCreate', async interaction => {
    if (!interaction.isChatInputCommand()) return;

    if (interaction.commandName === 'game') {
        const sub = interaction.options.getSubcommand();
        const userId = interaction.user.id;

        if (sub === 'start') {
            if (games.has(userId)) {
                return interaction.reply({
                    content: '‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß! ‡∏ó‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà',
                    ephemeral: true
                });
            }

            const targetNumber = Math.floor(Math.random() * 100) + 1;
            games.set(userId, { targetNumber, attemptsLeft: 5, startTime: Date.now() });

            const embed = new EmbedBuilder()
                .setTitle('üé≤ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡∏ó‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç!')
                .setDescription('‡∏ó‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 1 ‡∏ñ‡∏∂‡∏á 100\nüîπ ‡πÉ‡∏ä‡πâ `/game guess <number>` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≤‡∏¢\nüîπ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÇ‡∏≠‡∏Å‡∏≤‡∏™ 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á')
                .setColor('Blue');

            return interaction.reply({ embeds: [embed] });
        }

        if (sub === 'guess') {
            if (!games.has(userId)) {
                return interaction.reply({
                    content: '‚ùå ‡πÄ‡∏Å‡∏°‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°! ‡πÉ‡∏ä‡πâ `/game start` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°',
                    ephemeral: true
                });
            }

            const number = interaction.options.getInteger('number');
            const game = games.get(userId);
            game.attemptsLeft--;

            let response = '';
            let color = 'Yellow';
            let encouragements = ['‡∏≠‡∏¢‡πà‡∏≤‡∏¢‡∏≠‡∏°‡πÅ‡∏û‡πâ! üî•', '‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á! üí™', '‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏Å‡∏•‡πâ‡πÅ‡∏•‡πâ‡∏ß! üéØ', '‡∏Ñ‡∏¥‡∏î‡∏î‡∏µ‡πÜ ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà ü§î'];

            if (number === game.targetNumber) {
                const timeTaken = ((Date.now() - game.startTime) / 1000).toFixed(2);
                response = `üéâ **‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!** ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏∑‡∏≠ ${game.targetNumber} ‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ ${timeTaken} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`;
                color = 'Green';

                if (!leaderboard.has(userId) || leaderboard.get(userId) > timeTaken) {
                    leaderboard.set(userId, timeTaken);
                }
                games.delete(userId);
            } else if (game.attemptsLeft === 0) {
                response = `üí• **‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏û‡πâ!** ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏∑‡∏≠ ${game.targetNumber}`;
                color = 'Red';
                games.delete(userId);
            } else {
                const hint = number < game.targetNumber ? 'üîº ‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô' : 'üîΩ ‡∏ï‡πà‡∏≥‡∏•‡∏á';
                response = `${hint}! (${game.attemptsLeft} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠)\n${encouragements[Math.floor(Math.random() * encouragements.length)]}`;
            }

            const embed = new EmbedBuilder()
                .setTitle('üîç ‡∏ó‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç')
                .setDescription(response)
                .setColor(color);

            return interaction.reply({ embeds: [embed] });
        }
    }
});

client.login(TOKEN);
